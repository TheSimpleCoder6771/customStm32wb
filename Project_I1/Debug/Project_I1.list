
Project_I1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001904  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08001a40  08001a40  00002a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bbc  08001bbc  00002bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001bc0  08001bc0  00002bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  20000008  08001bc4  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  2000000c  08001bc8  0000300c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000028  08001bc8  00003028  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005fbd  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000011bb  00000000  00000000  00008ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000730  00000000  00000000  0000a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000554  00000000  00000000  0000a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00018ad0  00000000  00000000  0000ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00005ba6  00000000  00000000  0002390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0008b11e  00000000  00000000  000294b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000b45d0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c60  00000000  00000000  000b4614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  000b6274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001a28 	.word	0x08001a28

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001a28 	.word	0x08001a28

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b6:	463b      	mov	r3, r7
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]
 80001c4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80001c6:	2004      	movs	r0, #4
 80001c8:	f7ff ffd8 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80001cc:	2080      	movs	r0, #128	@ 0x80
 80001ce:	f7ff ffd5 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f7ff ffd2 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80001d8:	2001      	movs	r0, #1
 80001da:	f7ff ffcf 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80001de:	2010      	movs	r0, #16
 80001e0:	f7ff ffcc 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80001e4:	2008      	movs	r0, #8
 80001e6:	f7ff ffc9 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 80001ea:	f643 437f 	movw	r3, #15487	@ 0x3c7f
 80001ee:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80001f0:	2303      	movs	r3, #3
 80001f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80001f4:	2300      	movs	r3, #0
 80001f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f8:	463b      	mov	r3, r7
 80001fa:	4619      	mov	r1, r3
 80001fc:	4820      	ldr	r0, [pc, #128]	@ (8000280 <MX_GPIO_Init+0xd0>)
 80001fe:	f000 fee1 	bl	8000fc4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000202:	2308      	movs	r3, #8
 8000204:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000206:	2303      	movs	r3, #3
 8000208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800020a:	2300      	movs	r3, #0
 800020c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800020e:	463b      	mov	r3, r7
 8000210:	4619      	mov	r1, r3
 8000212:	481c      	ldr	r0, [pc, #112]	@ (8000284 <MX_GPIO_Init+0xd4>)
 8000214:	f000 fed6 	bl	8000fc4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_2|LL_GPIO_PIN_10
 8000218:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800021c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_12
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800021e:	2303      	movs	r3, #3
 8000220:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000226:	463b      	mov	r3, r7
 8000228:	4619      	mov	r1, r3
 800022a:	4817      	ldr	r0, [pc, #92]	@ (8000288 <MX_GPIO_Init+0xd8>)
 800022c:	f000 feca 	bl	8000fc4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000230:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 8000234:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000236:	2303      	movs	r3, #3
 8000238:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023e:	463b      	mov	r3, r7
 8000240:	4619      	mov	r1, r3
 8000242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000246:	f000 febd 	bl	8000fc4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800024a:	2310      	movs	r3, #16
 800024c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800024e:	2303      	movs	r3, #3
 8000250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000256:	463b      	mov	r3, r7
 8000258:	4619      	mov	r1, r3
 800025a:	480c      	ldr	r0, [pc, #48]	@ (800028c <MX_GPIO_Init+0xdc>)
 800025c:	f000 feb2 	bl	8000fc4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000260:	2303      	movs	r3, #3
 8000262:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000264:	2303      	movs	r3, #3
 8000266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	4807      	ldr	r0, [pc, #28]	@ (8000290 <MX_GPIO_Init+0xe0>)
 8000272:	f000 fea7 	bl	8000fc4 <LL_GPIO_Init>

}
 8000276:	bf00      	nop
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	48000800 	.word	0x48000800
 8000284:	48001c00 	.word	0x48001c00
 8000288:	48000400 	.word	0x48000400
 800028c:	48001000 	.word	0x48001000
 8000290:	48000c00 	.word	0x48000c00

08000294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <__NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <__NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	@ (80002f4 <__NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	db0a      	blt.n	8000322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	@ (8000344 <__NVIC_SetPriority+0x4c>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	0112      	lsls	r2, r2, #4
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	440b      	add	r3, r1
 800031c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000320:	e00a      	b.n	8000338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4908      	ldr	r1, [pc, #32]	@ (8000348 <__NVIC_SetPriority+0x50>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	3b04      	subs	r3, #4
 8000330:	0112      	lsls	r2, r2, #4
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	440b      	add	r3, r1
 8000336:	761a      	strb	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	@ 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	@ 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80003b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80003c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003c4:	6013      	str	r3, [r2, #0]
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80003d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80003e2:	d101      	bne.n	80003e8 <LL_RCC_HSE_IsReady+0x18>
 80003e4:	2301      	movs	r3, #1
 80003e6:	e000      	b.n	80003ea <LL_RCC_HSE_IsReady+0x1a>
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000424:	d101      	bne.n	800042a <LL_RCC_HSI_IsReady+0x18>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_RCC_HSI_IsReady+0x1a>
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800043e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	f023 0203 	bic.w	r2, r3, #3
 8000448:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4313      	orrs	r3, r2
 8000450:	608b      	str	r3, [r1, #8]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f003 030c 	and.w	r3, r3, #12
}
 800046c:	4618      	mov	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_RCC_SetRFWKPClockSource>:
  * @note   (*) Value not defined for all devices
  *
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRFWKPClockSource(uint32_t Source)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800047e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000486:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	608b      	str	r3, [r1, #8]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80004d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80004da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80004de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80004fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000502:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000506:	f023 020f 	bic.w	r2, r3, #15
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	091b      	lsrs	r3, r3, #4
 800050e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000512:	4313      	orrs	r3, r2
 8000514:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4313      	orrs	r3, r2
 800053e:	608b      	str	r3, [r1, #8]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	608b      	str	r3, [r1, #8]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800057c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000582:	f023 0203 	bic.w	r2, r3, #3
 8000586:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <LL_RCC_SetSMPSPrescaler>:
  *         @arg @ref LL_RCC_SMPS_DIV_2
  *         @arg @ref LL_RCC_SMPS_DIV_3
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSPrescaler(uint32_t Prescaler)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80005a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80005ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80005e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80005f4:	d101      	bne.n	80005fa <LL_RCC_PLL_IsReady+0x18>
 80005f6:	2301      	movs	r3, #1
 80005f8:	e000      	b.n	80005fc <LL_RCC_PLL_IsReady+0x1a>
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800061e:	4013      	ands	r3, r2
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	4311      	orrs	r1, r2
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	0212      	lsls	r2, r2, #8
 800062a:	4311      	orrs	r1, r2
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	430a      	orrs	r2, r1
 8000630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000634:	4313      	orrs	r3, r2
 8000636:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	1fff808c 	.word	0x1fff808c

08000648 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800064c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <LL_FLASH_SetLatency+0x24>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f023 0207 	bic.w	r2, r3, #7
 8000678:	4904      	ldr	r1, [pc, #16]	@ (800068c <LL_FLASH_SetLatency+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	600b      	str	r3, [r1, #0]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	58004000 	.word	0x58004000

08000690 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <LL_FLASH_GetLatency+0x18>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0307 	and.w	r3, r3, #7
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	58004000 	.word	0x58004000

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 80006b0:	2003      	movs	r0, #3
 80006b2:	f7ff fdef 	bl	8000294 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority( SysTick_IRQn, NVIC_EncodePriority( NVIC_GetPriorityGrouping(), 15, 0 ) );
 80006b6:	f7ff fe11 	bl	80002dc <__NVIC_GetPriorityGrouping>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2200      	movs	r2, #0
 80006be:	210f      	movs	r1, #15
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fe43 	bl	800034c <NVIC_EncodePriority>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 30ff 	mov.w	r0, #4294967295
 80006ce:	f7ff fe13 	bl	80002f8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f809 	bl	80006e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006d6:	f000 f855 	bl	8000784 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f7ff fd69 	bl	80001b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fa71 	bl	8000bc4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while ( 1 )
 80006e2:	bf00      	nop
 80006e4:	e7fd      	b.n	80006e2 <main+0x36>
	...

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config( void )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency( LL_FLASH_LATENCY_3 );
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff ffbb 	bl	8000668 <LL_FLASH_SetLatency>
  while ( LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3 )
 80006f2:	bf00      	nop
 80006f4:	f7ff ffcc 	bl	8000690 <LL_FLASH_GetLatency>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d1fa      	bne.n	80006f4 <SystemClock_Config+0xc>
  {
  }

  /* HSE configuration and activation */
  LL_RCC_HSE_Enable();
 80006fe:	f7ff fe58 	bl	80003b2 <LL_RCC_HSE_Enable>
  while ( LL_RCC_HSE_IsReady() != 1 )
 8000702:	bf00      	nop
 8000704:	f7ff fe64 	bl	80003d0 <LL_RCC_HSE_IsReady>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d1fa      	bne.n	8000704 <SystemClock_Config+0x1c>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 800070e:	f7ff fe71 	bl	80003f4 <LL_RCC_HSI_Enable>
  while ( LL_RCC_HSI_IsReady() != 1 )
 8000712:	bf00      	nop
 8000714:	f7ff fe7d 	bl	8000412 <LL_RCC_HSI_IsReady>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d1fa      	bne.n	8000714 <SystemClock_Config+0x2c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS( LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_2, 8, LL_RCC_PLLR_DIV_2 );
 800071e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000722:	2208      	movs	r2, #8
 8000724:	2110      	movs	r1, #16
 8000726:	2003      	movs	r0, #3
 8000728:	f7ff ff6e 	bl	8000608 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800072c:	f7ff ff4a 	bl	80005c4 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000730:	f7ff ff8a 	bl	8000648 <LL_RCC_PLL_EnableDomain_SYS>
  while ( LL_RCC_PLL_IsReady() != 1 )
 8000734:	bf00      	nop
 8000736:	f7ff ff54 	bl	80005e2 <LL_RCC_PLL_IsReady>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d1fa      	bne.n	8000736 <SystemClock_Config+0x4e>
  {
  }

  /* Sysclk activation on the main PLL */
  /* Set CPU1 prescaler*/
  LL_RCC_SetAHBPrescaler( LL_RCC_SYSCLK_DIV_1 );
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff feae 	bl	80004a2 <LL_RCC_SetAHBPrescaler>

  /* Set CPU2 prescaler*/
  LL_C2_RCC_SetAHBPrescaler( LL_RCC_SYSCLK_DIV_2 );
 8000746:	2080      	movs	r0, #128	@ 0x80
 8000748:	f7ff febf 	bl	80004ca <LL_C2_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_PLL );
 800074c:	2003      	movs	r0, #3
 800074e:	f7ff fe72 	bl	8000436 <LL_RCC_SetSysClkSource>
  while ( LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 8000752:	bf00      	nop
 8000754:	f7ff fe83 	bl	800045e <LL_RCC_GetSysClkSource>
 8000758:	4603      	mov	r3, r0
 800075a:	2b0c      	cmp	r3, #12
 800075c:	d1fa      	bne.n	8000754 <SystemClock_Config+0x6c>
  {
  }

  /* Set AHB SHARED prescaler*/
  LL_RCC_SetAHB4Prescaler( LL_RCC_SYSCLK_DIV_1 );
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fec9 	bl	80004f6 <LL_RCC_SetAHB4Prescaler>

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler( LL_RCC_APB1_DIV_1 );
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fedd 	bl	8000524 <LL_RCC_SetAPB1Prescaler>

  /* Set APB2 prescaler*/
  LL_RCC_SetAPB2Prescaler( LL_RCC_APB2_DIV_1 );
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff feee 	bl	800054c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick( 64000000 );
 8000770:	4803      	ldr	r0, [pc, #12]	@ (8000780 <SystemClock_Config+0x98>)
 8000772:	f001 f90f 	bl	8001994 <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock( 64000000 );
 8000776:	4802      	ldr	r0, [pc, #8]	@ (8000780 <SystemClock_Config+0x98>)
 8000778:	f001 f91a 	bl	80019b0 <LL_SetSystemCoreClock>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	03d09000 	.word	0x03d09000

08000784 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config( void )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  LL_RCC_SetSMPSClockSource( LL_RCC_SMPS_CLKSOURCE_HSI );
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fef3 	bl	8000574 <LL_RCC_SetSMPSClockSource>
  LL_RCC_SetSMPSPrescaler( LL_RCC_SMPS_DIV_1 );
 800078e:	2010      	movs	r0, #16
 8000790:	f7ff ff04 	bl	800059c <LL_RCC_SetSMPSPrescaler>
  LL_RCC_SetRFWKPClockSource( LL_RCC_RFWKP_CLKSOURCE_NONE );
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff fe6e 	bl	8000476 <LL_RCC_SetRFWKPClockSource>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed( uint8_t * file, uint32_t line )
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
     /* USER CODE END 6 */
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <NMI_Handler+0x4>

080007bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <MemManage_Handler+0x4>

080007cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <UsageFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemInit+0x98>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082e:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <SystemInit+0x98>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800084c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000850:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <SystemInit+0x9c>)
 800085e:	4013      	ands	r3, r2
 8000860:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800086a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800086e:	f023 0305 	bic.w	r3, r3, #5
 8000872:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800087a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800087e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800088e:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <SystemInit+0xa0>)
 8000890:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <SystemInit+0xa0>)
 8000898:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80008a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00
 80008c0:	faf6fefb 	.word	0xfaf6fefb
 80008c4:	22041000 	.word	0x22041000

080008c8 <__NVIC_GetPriorityGrouping>:
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4907      	ldr	r1, [pc, #28]	@ (800091c <__NVIC_EnableIRQ+0x38>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	@ (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	@ (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	@ 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_RCC_SetUSARTClockSource>:
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80009e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ea:	f023 0203 	bic.w	r2, r3, #3
 80009ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <LL_AHB2_GRP1_EnableClock>:
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4013      	ands	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b089      	sub	sp, #36	@ 0x24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	e853 3f00 	ldrex	r3, [r3]
 8000ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	075b      	lsls	r3, r3, #29
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	61ba      	str	r2, [r7, #24]
 8000ad8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ada:	6979      	ldr	r1, [r7, #20]
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	e841 2300 	strex	r3, r2, [r1]
 8000ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1e4      	bne.n	8000ab4 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3724      	adds	r7, #36	@ 0x24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	@ 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3308      	adds	r3, #8
 8000b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	e853 3f00 	ldrex	r3, [r3]
 8000b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	065b      	lsls	r3, r3, #25
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3308      	adds	r3, #8
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	61ba      	str	r2, [r7, #24]
 8000b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b28:	6979      	ldr	r1, [r7, #20]
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	e841 2300 	strex	r3, r2, [r1]
 8000b30:	613b      	str	r3, [r7, #16]
   return(result);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e4      	bne.n	8000b02 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3724      	adds	r7, #36	@ 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	609a      	str	r2, [r3, #8]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000b86:	d101      	bne.n	8000b8c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bae:	d101      	bne.n	8000bb4 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	@ 0x38
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2220      	movs	r2, #32
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fefc 	bl	80019d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fef6 	bl	80009da <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000bee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bf2:	f7ff ff21 	bl	8000a38 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff ff05 	bl	8000a06 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000bfc:	23c0      	movs	r3, #192	@ 0xc0
 8000bfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c00:	2302      	movs	r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000c10:	2307      	movs	r3, #7
 8000c12:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4826      	ldr	r0, [pc, #152]	@ (8000cb4 <MX_USART1_UART_Init+0xf0>)
 8000c1a:	f000 f9d3 	bl	8000fc4 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c1e:	f7ff fe53 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fea3 	bl	8000974 <NVIC_EncodePriority>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4619      	mov	r1, r3
 8000c32:	2024      	movs	r0, #36	@ 0x24
 8000c34:	f7ff fe74 	bl	8000920 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000c38:	2024      	movs	r0, #36	@ 0x24
 8000c3a:	f7ff fe53 	bl	80008e4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8000c42:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c46:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c54:	230c      	movs	r3, #12
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c68:	f000 fd5c 	bl	8001724 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c70:	f7ff ff1b 	bl	8000aaa <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000c74:	2100      	movs	r1, #0
 8000c76:	4810      	ldr	r0, [pc, #64]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c78:	f7ff ff3e 	bl	8000af8 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8000c7c:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c7e:	f7ff ff04 	bl	8000a8a <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8000c82:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c84:	f7ff ff5f 	bl	8000b46 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8000c88:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c8a:	f7ff feee 	bl	8000a6a <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8000c8e:	bf00      	nop
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c92:	f7ff ff6e 	bl	8000b72 <LL_USART_IsActiveFlag_TEACK>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f9      	beq.n	8000c90 <MX_USART1_UART_Init+0xcc>
 8000c9c:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <MX_USART1_UART_Init+0xf4>)
 8000c9e:	f7ff ff7c 	bl	8000b9a <LL_USART_IsActiveFlag_REACK>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f3      	beq.n	8000c90 <MX_USART1_UART_Init+0xcc>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	@ 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	40013800 	.word	0x40013800

08000cbc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000cbc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc0:	3304      	adds	r3, #4

08000cc2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000cc6:	d3f9      	bcc.n	8000cbc <CopyDataInit>
  bx lr
 8000cc8:	4770      	bx	lr

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000cca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ccc:	3004      	adds	r0, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000cce:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>
  bx lr
 8000cd2:	4770      	bx	lr

08000cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd8:	f7ff fda4 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000cdc:	480b      	ldr	r0, [pc, #44]	@ (8000d0c <LoopForever+0x6>)
 8000cde:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <LoopForever+0xa>)
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <LoopForever+0xe>)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f7ff ffed 	bl	8000cc2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ce8:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <LoopForever+0x12>)
 8000cea:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <LoopForever+0x16>)
 8000cec:	4a0c      	ldr	r2, [pc, #48]	@ (8000d20 <LoopForever+0x1a>)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f7ff ffe7 	bl	8000cc2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <LoopForever+0x1e>)
 8000cf6:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <LoopForever+0x22>)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f7ff ffe8 	bl	8000cce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f000 fe6f 	bl	80019e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d02:	f7ff fcd3 	bl	80006ac <main>

08000d06 <LoopForever>:

LoopForever:
  b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	08001bc4 	.word	0x08001bc4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d18:	20030000 	.word	0x20030000
 8000d1c:	20030000 	.word	0x20030000
 8000d20:	08001bc8 	.word	0x08001bc8
  INIT_BSS _sbss, _ebss
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	20000028 	.word	0x20000028

08000d2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_IRQHandler>

08000d2e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b08b      	sub	sp, #44	@ 0x2c
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa93 f3a3 	rbit	r3, r3
 8000d48:	613b      	str	r3, [r7, #16]
  return result;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d54:	2320      	movs	r3, #32
 8000d56:	e003      	b.n	8000d60 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2103      	movs	r1, #3
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	fa93 f3a3 	rbit	r3, r3
 8000d76:	61fb      	str	r3, [r7, #28]
  return result;
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d82:	2320      	movs	r3, #32
 8000d84:	e003      	b.n	8000d8e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	431a      	orrs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	372c      	adds	r7, #44	@ 0x2c
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	fb01 f303 	mul.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	605a      	str	r2, [r3, #4]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b08b      	sub	sp, #44	@ 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	613b      	str	r3, [r7, #16]
  return result;
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000dfe:	2320      	movs	r3, #32
 8000e00:	e003      	b.n	8000e0a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	401a      	ands	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	61fb      	str	r3, [r7, #28]
  return result;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000e2c:	2320      	movs	r3, #32
 8000e2e:	e003      	b.n	8000e38 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	fab3 f383 	clz	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000e46:	bf00      	nop
 8000e48:	372c      	adds	r7, #44	@ 0x2c
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b08b      	sub	sp, #44	@ 0x2c
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	613b      	str	r3, [r7, #16]
  return result;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	e003      	b.n	8000e84 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2103      	movs	r1, #3
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	61fb      	str	r3, [r7, #28]
  return result;
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	e003      	b.n	8000eb2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	60da      	str	r2, [r3, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	372c      	adds	r7, #44	@ 0x2c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	@ 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a1a      	ldr	r2, [r3, #32]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	613b      	str	r3, [r7, #16]
  return result;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	e003      	b.n	8000efe <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	210f      	movs	r1, #15
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	401a      	ands	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	61fb      	str	r3, [r7, #28]
  return result;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000f20:	2320      	movs	r3, #32
 8000f22:	e003      	b.n	8000f2c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	431a      	orrs	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000f3a:	bf00      	nop
 8000f3c:	372c      	adds	r7, #44	@ 0x2c
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b08b      	sub	sp, #44	@ 0x2c
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	613b      	str	r3, [r7, #16]
  return result;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000f6e:	2320      	movs	r3, #32
 8000f70:	e003      	b.n	8000f7a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	401a      	ands	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	61fb      	str	r3, [r7, #28]
  return result;
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000f9e:	2320      	movs	r3, #32
 8000fa0:	e003      	b.n	8000faa <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000fb8:	bf00      	nop
 8000fba:	372c      	adds	r7, #44	@ 0x2c
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fd4:	d017      	beq.n	8001006 <LL_GPIO_Init+0x42>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a83      	ldr	r2, [pc, #524]	@ (80011e8 <LL_GPIO_Init+0x224>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <LL_GPIO_Init+0x42>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a82      	ldr	r2, [pc, #520]	@ (80011ec <LL_GPIO_Init+0x228>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00f      	beq.n	8001006 <LL_GPIO_Init+0x42>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a81      	ldr	r2, [pc, #516]	@ (80011f0 <LL_GPIO_Init+0x22c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00b      	beq.n	8001006 <LL_GPIO_Init+0x42>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a80      	ldr	r2, [pc, #512]	@ (80011f4 <LL_GPIO_Init+0x230>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <LL_GPIO_Init+0x42>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80011f8 <LL_GPIO_Init+0x234>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d003      	beq.n	8001006 <LL_GPIO_Init+0x42>
 8000ffe:	21af      	movs	r1, #175	@ 0xaf
 8001000:	487e      	ldr	r0, [pc, #504]	@ (80011fc <LL_GPIO_Init+0x238>)
 8001002:	f7ff fbcc 	bl	800079e <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <LL_GPIO_Init+0x54>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001016:	d303      	bcc.n	8001020 <LL_GPIO_Init+0x5c>
 8001018:	21b0      	movs	r1, #176	@ 0xb0
 800101a:	4878      	ldr	r0, [pc, #480]	@ (80011fc <LL_GPIO_Init+0x238>)
 800101c:	f7ff fbbf 	bl	800079e <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00f      	beq.n	8001048 <LL_GPIO_Init+0x84>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d00b      	beq.n	8001048 <LL_GPIO_Init+0x84>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d007      	beq.n	8001048 <LL_GPIO_Init+0x84>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d003      	beq.n	8001048 <LL_GPIO_Init+0x84>
 8001040:	21b1      	movs	r1, #177	@ 0xb1
 8001042:	486e      	ldr	r0, [pc, #440]	@ (80011fc <LL_GPIO_Init+0x238>)
 8001044:	f7ff fbab 	bl	800079e <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <LL_GPIO_Init+0xa4>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d007      	beq.n	8001068 <LL_GPIO_Init+0xa4>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d003      	beq.n	8001068 <LL_GPIO_Init+0xa4>
 8001060:	21b2      	movs	r1, #178	@ 0xb2
 8001062:	4866      	ldr	r0, [pc, #408]	@ (80011fc <LL_GPIO_Init+0x238>)
 8001064:	f7ff fb9b 	bl	800079e <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	617b      	str	r3, [r7, #20]
  return result;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <LL_GPIO_Init+0xc0>
    return 32U;
 8001080:	2320      	movs	r3, #32
 8001082:	e003      	b.n	800108c <LL_GPIO_Init+0xc8>
  return __builtin_clz(value);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800108e:	e0c8      	b.n	8001222 <LL_GPIO_Init+0x25e>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4013      	ands	r3, r2
 800109e:	623b      	str	r3, [r7, #32]

    if (currentpin != 0x00u)
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80ba 	beq.w	800121c <LL_GPIO_Init+0x258>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d003      	beq.n	80010b8 <LL_GPIO_Init+0xf4>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d12d      	bne.n	8001114 <LL_GPIO_Init+0x150>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00f      	beq.n	80010e0 <LL_GPIO_Init+0x11c>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00b      	beq.n	80010e0 <LL_GPIO_Init+0x11c>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d007      	beq.n	80010e0 <LL_GPIO_Init+0x11c>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d003      	beq.n	80010e0 <LL_GPIO_Init+0x11c>
 80010d8:	21c3      	movs	r1, #195	@ 0xc3
 80010da:	4848      	ldr	r0, [pc, #288]	@ (80011fc <LL_GPIO_Init+0x238>)
 80010dc:	f7ff fb5f 	bl	800079e <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	461a      	mov	r2, r3
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff fe75 	bl	8000dd8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <LL_GPIO_Init+0x142>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d003      	beq.n	8001106 <LL_GPIO_Init+0x142>
 80010fe:	21c9      	movs	r1, #201	@ 0xc9
 8001100:	483e      	ldr	r0, [pc, #248]	@ (80011fc <LL_GPIO_Init+0x238>)
 8001102:	f7ff fb4c 	bl	800079e <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	461a      	mov	r2, r3
 800110c:	6a39      	ldr	r1, [r7, #32]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe4a 	bl	8000da8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	461a      	mov	r2, r3
 800111a:	6a39      	ldr	r1, [r7, #32]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fe98 	bl	8000e52 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d171      	bne.n	800120e <LL_GPIO_Init+0x24a>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d03f      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d03b      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d037      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d033      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d02f      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d02b      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b06      	cmp	r3, #6
 8001160:	d027      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d023      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d01f      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b09      	cmp	r3, #9
 8001178:	d01b      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d017      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b0b      	cmp	r3, #11
 8001188:	d013      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d00f      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	2b0d      	cmp	r3, #13
 8001198:	d00b      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	2b0e      	cmp	r3, #14
 80011a0:	d007      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	d003      	beq.n	80011b2 <LL_GPIO_Init+0x1ee>
 80011aa:	21d5      	movs	r1, #213	@ 0xd5
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <LL_GPIO_Init+0x238>)
 80011ae:	f7ff faf6 	bl	800079e <assert_failed>
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	60bb      	str	r3, [r7, #8]
  return result;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <LL_GPIO_Init+0x208>
    return 32U;
 80011c8:	2320      	movs	r3, #32
 80011ca:	e003      	b.n	80011d4 <LL_GPIO_Init+0x210>
  return __builtin_clz(value);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008uL)
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d813      	bhi.n	8001200 <LL_GPIO_Init+0x23c>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	461a      	mov	r2, r3
 80011de:	6a39      	ldr	r1, [r7, #32]
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fe73 	bl	8000ecc <LL_GPIO_SetAFPin_0_7>
 80011e6:	e012      	b.n	800120e <LL_GPIO_Init+0x24a>
 80011e8:	48000400 	.word	0x48000400
 80011ec:	48000800 	.word	0x48000800
 80011f0:	48000c00 	.word	0x48000c00
 80011f4:	48001000 	.word	0x48001000
 80011f8:	48001c00 	.word	0x48001c00
 80011fc:	08001a40 	.word	0x08001a40
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	461a      	mov	r2, r3
 8001206:	6a39      	ldr	r1, [r7, #32]
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fe9c 	bl	8000f46 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	461a      	mov	r2, r3
 8001214:	6a39      	ldr	r1, [r7, #32]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fd89 	bl	8000d2e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	3301      	adds	r3, #1
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f af2f 	bne.w	8001090 <LL_GPIO_Init+0xcc>
  }

  return (SUCCESS);
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3728      	adds	r7, #40	@ 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800124a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800124e:	d101      	bne.n	8001254 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_RCC_HSI_IsReady>:
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001272:	d101      	bne.n	8001278 <LL_RCC_HSI_IsReady+0x18>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <LL_RCC_HSI_IsReady+0x1a>
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_RCC_LSE_IsReady>:
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <LL_RCC_LSE_IsReady+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_RCC_LSE_IsReady+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_RCC_MSI_GetRange>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b8:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80012be:	d901      	bls.n	80012c4 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80012c0:	23b0      	movs	r3, #176	@ 0xb0
 80012c2:	607b      	str	r3, [r7, #4]
  return msiRange;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_RCC_GetSysClkSource>:
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_RCC_GetAHBPrescaler>:
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_RCC_GetAPB2Prescaler>:
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_RCC_GetUSARTClockSource>:
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001326:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4013      	ands	r3, r2
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_RCC_PLL_GetN>:
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800133e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_RCC_PLL_GetR>:
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_RCC_PLL_GetDivider>:
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f003 0303 	and.w	r3, r3, #3
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d004      	beq.n	80013b8 <LL_RCC_GetUSARTClockFreq+0x1c>
 80013ae:	f240 1177 	movw	r1, #375	@ 0x177
 80013b2:	481c      	ldr	r0, [pc, #112]	@ (8001424 <LL_RCC_GetUSARTClockFreq+0x88>)
 80013b4:	f7ff f9f3 	bl	800079e <assert_failed>

  /* USART1CLK clock frequency */
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffae 	bl	800131a <LL_RCC_GetUSARTClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d012      	beq.n	80013ea <LL_RCC_GetUSARTClockFreq+0x4e>
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d819      	bhi.n	80013fc <LL_RCC_GetUSARTClockFreq+0x60>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d002      	beq.n	80013d2 <LL_RCC_GetUSARTClockFreq+0x36>
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d004      	beq.n	80013da <LL_RCC_GetUSARTClockFreq+0x3e>
 80013d0:	e014      	b.n	80013fc <LL_RCC_GetUSARTClockFreq+0x60>
  {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      usart_frequency = RCC_GetSystemClockFreq();
 80013d2:	f000 f82b 	bl	800142c <RCC_GetSystemClockFreq>
 80013d6:	60f8      	str	r0, [r7, #12]
      break;
 80013d8:	e01f      	b.n	800141a <LL_RCC_GetUSARTClockFreq+0x7e>

    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80013da:	f7ff ff41 	bl	8001260 <LL_RCC_HSI_IsReady>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d117      	bne.n	8001414 <LL_RCC_GetUSARTClockFreq+0x78>
      {
        usart_frequency = HSI_VALUE;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <LL_RCC_GetUSARTClockFreq+0x8c>)
 80013e6:	60fb      	str	r3, [r7, #12]
      }
      break;
 80013e8:	e014      	b.n	8001414 <LL_RCC_GetUSARTClockFreq+0x78>

    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80013ea:	f7ff ff4b 	bl	8001284 <LL_RCC_LSE_IsReady>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d111      	bne.n	8001418 <LL_RCC_GetUSARTClockFreq+0x7c>
      {
        usart_frequency = LSE_VALUE;
 80013f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013f8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80013fa:	e00d      	b.n	8001418 <LL_RCC_GetUSARTClockFreq+0x7c>

    case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
    default:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 80013fc:	f000 f816 	bl	800142c <RCC_GetSystemClockFreq>
 8001400:	4603      	mov	r3, r0
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f86c 	bl	80014e0 <RCC_GetHCLK1ClockFreq>
 8001408:	4603      	mov	r3, r0
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f87e 	bl	800150c <RCC_GetPCLK2ClockFreq>
 8001410:	60f8      	str	r0, [r7, #12]
      break;
 8001412:	e002      	b.n	800141a <LL_RCC_GetUSARTClockFreq+0x7e>
      break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <LL_RCC_GetUSARTClockFreq+0x7e>
      break;
 8001418:	bf00      	nop
  }
  return usart_frequency;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08001a78 	.word	0x08001a78
 8001428:	00f42400 	.word	0x00f42400

0800142c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001432:	f7ff ff4e 	bl	80012d2 <LL_RCC_GetSysClkSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d83a      	bhi.n	80014b2 <RCC_GetSystemClockFreq+0x86>
 800143c:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <RCC_GetSystemClockFreq+0x18>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	08001479 	.word	0x08001479
 8001448:	080014b3 	.word	0x080014b3
 800144c:	080014b3 	.word	0x080014b3
 8001450:	080014b3 	.word	0x080014b3
 8001454:	0800148f 	.word	0x0800148f
 8001458:	080014b3 	.word	0x080014b3
 800145c:	080014b3 	.word	0x080014b3
 8001460:	080014b3 	.word	0x080014b3
 8001464:	08001495 	.word	0x08001495
 8001468:	080014b3 	.word	0x080014b3
 800146c:	080014b3 	.word	0x080014b3
 8001470:	080014b3 	.word	0x080014b3
 8001474:	080014ab 	.word	0x080014ab
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001478:	f7ff ff16 	bl	80012a8 <LL_RCC_MSI_GetRange>
 800147c:	4603      	mov	r3, r0
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	4a13      	ldr	r2, [pc, #76]	@ (80014d4 <RCC_GetSystemClockFreq+0xa8>)
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	607b      	str	r3, [r7, #4]
      break;
 800148c:	e01c      	b.n	80014c8 <RCC_GetSystemClockFreq+0x9c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <RCC_GetSystemClockFreq+0xac>)
 8001490:	607b      	str	r3, [r7, #4]
      break;
 8001492:	e019      	b.n	80014c8 <RCC_GetSystemClockFreq+0x9c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001494:	f7ff fed2 	bl	800123c <LL_RCC_HSE_IsEnabledDiv2>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <RCC_GetSystemClockFreq+0x78>
      {
        frequency = HSE_VALUE / 2U;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <RCC_GetSystemClockFreq+0xac>)
 80014a0:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 80014a2:	e011      	b.n	80014c8 <RCC_GetSystemClockFreq+0x9c>
        frequency = HSE_VALUE;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <RCC_GetSystemClockFreq+0xb0>)
 80014a6:	607b      	str	r3, [r7, #4]
      break;
 80014a8:	e00e      	b.n	80014c8 <RCC_GetSystemClockFreq+0x9c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80014aa:	f000 f847 	bl	800153c <RCC_PLL_GetFreqDomain_SYS>
 80014ae:	6078      	str	r0, [r7, #4]
      break;
 80014b0:	e00a      	b.n	80014c8 <RCC_GetSystemClockFreq+0x9c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80014b2:	f7ff fef9 	bl	80012a8 <LL_RCC_MSI_GetRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <RCC_GetSystemClockFreq+0xa8>)
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	607b      	str	r3, [r7, #4]
      break;
 80014c6:	bf00      	nop
  }

  return frequency;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08001b4c 	.word	0x08001b4c
 80014d8:	00f42400 	.word	0x00f42400
 80014dc:	01e84800 	.word	0x01e84800

080014e0 <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80014e8:	f7ff feff 	bl	80012ea <LL_RCC_GetAHBPrescaler>
 80014ec:	4603      	mov	r3, r0
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <RCC_GetHCLK1ClockFreq+0x28>)
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	08001aec 	.word	0x08001aec

0800150c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001514:	f7ff fef5 	bl	8001302 <LL_RCC_GetAPB2Prescaler>
 8001518:	4603      	mov	r3, r0
 800151a:	0adb      	lsrs	r3, r3, #11
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <RCC_GetPCLK2ClockFreq+0x2c>)
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08001b2c 	.word	0x08001b2c

0800153c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001542:	f7ff ff1f 	bl	8001384 <LL_RCC_PLL_GetMainSource>
 8001546:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d017      	beq.n	800157e <RCC_PLL_GetFreqDomain_SYS+0x42>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d81f      	bhi.n	8001594 <RCC_PLL_GetFreqDomain_SYS+0x58>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d00b      	beq.n	8001578 <RCC_PLL_GetFreqDomain_SYS+0x3c>
 8001560:	e018      	b.n	8001594 <RCC_PLL_GetFreqDomain_SYS+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001562:	f7ff fea1 	bl	80012a8 <LL_RCC_MSI_GetRange>
 8001566:	4603      	mov	r3, r0
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	607b      	str	r3, [r7, #4]
      break;
 8001576:	e018      	b.n	80015aa <RCC_PLL_GetFreqDomain_SYS+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 800157a:	607b      	str	r3, [r7, #4]
      break;
 800157c:	e015      	b.n	80015aa <RCC_PLL_GetFreqDomain_SYS+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800157e:	f7ff fe5d 	bl	800123c <LL_RCC_HSE_IsEnabledDiv2>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	d102      	bne.n	800158e <RCC_PLL_GetFreqDomain_SYS+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 800158a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800158c:	e00d      	b.n	80015aa <RCC_PLL_GetFreqDomain_SYS+0x6e>
        pllinputfreq = HSE_VALUE;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <RCC_PLL_GetFreqDomain_SYS+0xa8>)
 8001590:	607b      	str	r3, [r7, #4]
      break;
 8001592:	e00a      	b.n	80015aa <RCC_PLL_GetFreqDomain_SYS+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001594:	f7ff fe88 	bl	80012a8 <LL_RCC_MSI_GetRange>
 8001598:	4603      	mov	r3, r0
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	607b      	str	r3, [r7, #4]
      break;
 80015a8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80015aa:	f7ff fec6 	bl	800133a <LL_RCC_PLL_GetN>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	fb03 f402 	mul.w	r4, r3, r2
 80015b6:	f7ff fed9 	bl	800136c <LL_RCC_PLL_GetDivider>
 80015ba:	4603      	mov	r3, r0
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	3301      	adds	r3, #1
 80015c0:	fbb4 f4f3 	udiv	r4, r4, r3
 80015c4:	f7ff fec6 	bl	8001354 <LL_RCC_PLL_GetR>
 80015c8:	4603      	mov	r3, r0
 80015ca:	0f5b      	lsrs	r3, r3, #29
 80015cc:	3301      	adds	r3, #1
 80015ce:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	08001b4c 	.word	0x08001b4c
 80015e0:	00f42400 	.word	0x00f42400
 80015e4:	01e84800 	.word	0x01e84800

080015e8 <LL_USART_IsEnabled>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <LL_USART_IsEnabled+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_USART_IsEnabled+0x1a>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <LL_USART_SetPrescaler>:
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	f023 030f 	bic.w	r3, r3, #15
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b292      	uxth	r2, r2
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_USART_SetStopBitsLength>:
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_USART_SetHWFlowCtrl>:
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <LL_USART_SetBaudRate>:
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0b      	cmp	r3, #11
 8001696:	d83c      	bhi.n	8001712 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d039      	beq.n	8001712 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016a4:	d122      	bne.n	80016ec <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <LL_USART_SetBaudRate+0x9c>)
 80016ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	005a      	lsls	r2, r3, #1
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	441a      	add	r2, r3
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
}
 80016ea:	e012      	b.n	8001712 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <LL_USART_SetBaudRate+0x9c>)
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	441a      	add	r2, r3
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	60da      	str	r2, [r3, #12]
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	08001b8c 	.word	0x08001b8c

08001724 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a85      	ldr	r2, [pc, #532]	@ (8001950 <LL_USART_Init+0x22c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d003      	beq.n	8001746 <LL_USART_Init+0x22>
 800173e:	21b6      	movs	r1, #182	@ 0xb6
 8001740:	4884      	ldr	r0, [pc, #528]	@ (8001954 <LL_USART_Init+0x230>)
 8001742:	f7ff f82c 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d02f      	beq.n	80017ae <LL_USART_Init+0x8a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d02b      	beq.n	80017ae <LL_USART_Init+0x8a>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d027      	beq.n	80017ae <LL_USART_Init+0x8a>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d023      	beq.n	80017ae <LL_USART_Init+0x8a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d01f      	beq.n	80017ae <LL_USART_Init+0x8a>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d01b      	beq.n	80017ae <LL_USART_Init+0x8a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b06      	cmp	r3, #6
 800177c:	d017      	beq.n	80017ae <LL_USART_Init+0x8a>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b07      	cmp	r3, #7
 8001784:	d013      	beq.n	80017ae <LL_USART_Init+0x8a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d00f      	beq.n	80017ae <LL_USART_Init+0x8a>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d00b      	beq.n	80017ae <LL_USART_Init+0x8a>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d007      	beq.n	80017ae <LL_USART_Init+0x8a>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b0b      	cmp	r3, #11
 80017a4:	d003      	beq.n	80017ae <LL_USART_Init+0x8a>
 80017a6:	21b7      	movs	r1, #183	@ 0xb7
 80017a8:	486a      	ldr	r0, [pc, #424]	@ (8001954 <LL_USART_Init+0x230>)
 80017aa:	f7fe fff8 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a69      	ldr	r2, [pc, #420]	@ (8001958 <LL_USART_Init+0x234>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d903      	bls.n	80017c0 <LL_USART_Init+0x9c>
 80017b8:	21b8      	movs	r1, #184	@ 0xb8
 80017ba:	4866      	ldr	r0, [pc, #408]	@ (8001954 <LL_USART_Init+0x230>)
 80017bc:	f7fe ffef 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017c8:	d00c      	beq.n	80017e4 <LL_USART_Init+0xc0>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <LL_USART_Init+0xc0>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017da:	d003      	beq.n	80017e4 <LL_USART_Init+0xc0>
 80017dc:	21b9      	movs	r1, #185	@ 0xb9
 80017de:	485d      	ldr	r0, [pc, #372]	@ (8001954 <LL_USART_Init+0x230>)
 80017e0:	f7fe ffdd 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ec:	d011      	beq.n	8001812 <LL_USART_Init+0xee>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <LL_USART_Init+0xee>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80017fe:	d008      	beq.n	8001812 <LL_USART_Init+0xee>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001808:	d003      	beq.n	8001812 <LL_USART_Init+0xee>
 800180a:	21ba      	movs	r1, #186	@ 0xba
 800180c:	4851      	ldr	r0, [pc, #324]	@ (8001954 <LL_USART_Init+0x230>)
 800180e:	f7fe ffc6 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <LL_USART_Init+0x112>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001822:	d008      	beq.n	8001836 <LL_USART_Init+0x112>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800182c:	d003      	beq.n	8001836 <LL_USART_Init+0x112>
 800182e:	21bb      	movs	r1, #187	@ 0xbb
 8001830:	4848      	ldr	r0, [pc, #288]	@ (8001954 <LL_USART_Init+0x230>)
 8001832:	f7fe ffb4 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00f      	beq.n	800185e <LL_USART_Init+0x13a>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b04      	cmp	r3, #4
 8001844:	d00b      	beq.n	800185e <LL_USART_Init+0x13a>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d007      	beq.n	800185e <LL_USART_Init+0x13a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d003      	beq.n	800185e <LL_USART_Init+0x13a>
 8001856:	21bc      	movs	r1, #188	@ 0xbc
 8001858:	483e      	ldr	r0, [pc, #248]	@ (8001954 <LL_USART_Init+0x230>)
 800185a:	f7fe ffa0 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <LL_USART_Init+0x168>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800186e:	d00d      	beq.n	800188c <LL_USART_Init+0x168>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001878:	d008      	beq.n	800188c <LL_USART_Init+0x168>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001882:	d003      	beq.n	800188c <LL_USART_Init+0x168>
 8001884:	21bd      	movs	r1, #189	@ 0xbd
 8001886:	4833      	ldr	r0, [pc, #204]	@ (8001954 <LL_USART_Init+0x230>)
 8001888:	f7fe ff89 	bl	800079e <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <LL_USART_Init+0x182>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800189c:	d003      	beq.n	80018a6 <LL_USART_Init+0x182>
 800189e:	21be      	movs	r1, #190	@ 0xbe
 80018a0:	482c      	ldr	r0, [pc, #176]	@ (8001954 <LL_USART_Init+0x230>)
 80018a2:	f7fe ff7c 	bl	800079e <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fe9e 	bl	80015e8 <LL_USART_IsEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d148      	bne.n	8001944 <LL_USART_Init+0x220>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b29      	ldr	r3, [pc, #164]	@ (800195c <LL_USART_Init+0x238>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6891      	ldr	r1, [r2, #8]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6912      	ldr	r2, [r2, #16]
 80018c2:	4311      	orrs	r1, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6952      	ldr	r2, [r2, #20]
 80018c8:	4311      	orrs	r1, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	69d2      	ldr	r2, [r2, #28]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4619      	mov	r1, r3
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff feaa 	bl	8001636 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff feb7 	bl	800165c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <LL_USART_Init+0x22c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d103      	bne.n	80018fe <LL_USART_Init+0x1da>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f7ff fd50 	bl	800139c <LL_RCC_GetUSARTClockFreq>
 80018fc:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d019      	beq.n	8001938 <LL_USART_Init+0x214>
        && (USART_InitStruct->BaudRate != 0U))
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <LL_USART_Init+0x214>
    {
      status = SUCCESS;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	460b      	mov	r3, r1
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff feae 	bl	8001684 <LL_USART_SetBaudRate>

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d803      	bhi.n	8001938 <LL_USART_Init+0x214>
 8001930:	21fb      	movs	r1, #251	@ 0xfb
 8001932:	4808      	ldr	r0, [pc, #32]	@ (8001954 <LL_USART_Init+0x230>)
 8001934:	f7fe ff33 	bl	800079e <assert_failed>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fe65 	bl	800160e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40013800 	.word	0x40013800
 8001954:	08001ab0 	.word	0x08001ab0
 8001958:	007a1200 	.word	0x007a1200
 800195c:	efff69f3 	.word	0xefff69f3

08001960 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <LL_InitTick+0x30>)
 8001974:	3b01      	subs	r3, #1
 8001976:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <LL_InitTick+0x30>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <LL_InitTick+0x30>)
 8001980:	2205      	movs	r2, #5
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e010 	.word	0xe000e010

08001994 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field)
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 800199c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffdd 	bl	8001960 <LL_InitTick>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <LL_SetSystemCoreClock+0x1c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008

080019d0 <memset>:
 80019d0:	4402      	add	r2, r0
 80019d2:	4603      	mov	r3, r0
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d100      	bne.n	80019da <memset+0xa>
 80019d8:	4770      	bx	lr
 80019da:	f803 1b01 	strb.w	r1, [r3], #1
 80019de:	e7f9      	b.n	80019d4 <memset+0x4>

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001a18 <__libc_init_array+0x38>)
 80019e4:	4c0d      	ldr	r4, [pc, #52]	@ (8001a1c <__libc_init_array+0x3c>)
 80019e6:	1b64      	subs	r4, r4, r5
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	2600      	movs	r6, #0
 80019ec:	42a6      	cmp	r6, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	4d0b      	ldr	r5, [pc, #44]	@ (8001a20 <__libc_init_array+0x40>)
 80019f2:	4c0c      	ldr	r4, [pc, #48]	@ (8001a24 <__libc_init_array+0x44>)
 80019f4:	f000 f818 	bl	8001a28 <_init>
 80019f8:	1b64      	subs	r4, r4, r5
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	2600      	movs	r6, #0
 80019fe:	42a6      	cmp	r6, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a08:	4798      	blx	r3
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a12:	4798      	blx	r3
 8001a14:	3601      	adds	r6, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001bbc 	.word	0x08001bbc
 8001a1c:	08001bbc 	.word	0x08001bbc
 8001a20:	08001bbc 	.word	0x08001bbc
 8001a24:	08001bc0 	.word	0x08001bc0

08001a28 <_init>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr

08001a34 <_fini>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr
